`timescale 1 ns / 1 ns module LaOeuEctEoJMTXl3xc9zEB (p0E5U5ysrwNYFWhaD6aOTT, c2UJNE6Z3dXlstgbJ1NhIFE, n88LIbUZ8njlKe0EeBu7I5E, DKtuEu8YDlDAVk5CGQsPXB, s10zisAhwEOX8udjjtQfVH, FZTFt9IDRtl0lgyPesjanF, yk38ClHFCgoPWXjWEFI2XB); input p0E5U5ysrwNYFWhaD6aOTT; input c2UJNE6Z3dXlstgbJ1NhIFE; input n88LIbUZ8njlKe0EeBu7I5E; output DKtuEu8YDlDAVk5CGQsPXB; output s10zisAhwEOX8udjjtQfVH; output FZTFt9IDRtl0lgyPesjanF; output yk38ClHFCgoPWXjWEFI2XB; reg count2; wire phase_all; reg phase_0; wire phase_0_tmp; reg phase_1; wire phase_1_tmp; wire X6t4KTI7HLrJpZWCjyR3NH; always @ (posedge p0E5U5ysrwNYFWhaD6aOTT) begin: Counter2 if (c2UJNE6Z3dXlstgbJ1NhIFE == 1'b1) begin count2 <= 1'b1; end else begin if (n88LIbUZ8njlKe0EeBu7I5E == 1'b1) begin count2 <= ~ count2; end end end assign phase_all = n88LIbUZ8njlKe0EeBu7I5E ? 1'b1 : 1'b0; always @ ( posedge p0E5U5ysrwNYFWhaD6aOTT) begin: temp_process1 if (c2UJNE6Z3dXlstgbJ1NhIFE == 1'b1) begin phase_0 <= 1'b0; end else begin if (n88LIbUZ8njlKe0EeBu7I5E == 1'b1) begin phase_0 <= phase_0_tmp; end end end assign phase_0_tmp = (count2 == 1'b1 && n88LIbUZ8njlKe0EeBu7I5E == 1'b1) ? 1'b1 : 1'b0; always @ ( posedge p0E5U5ysrwNYFWhaD6aOTT) begin: temp_process2 if (c2UJNE6Z3dXlstgbJ1NhIFE == 1'b1) begin phase_1 <= 1'b1; end else begin if (n88LIbUZ8njlKe0EeBu7I5E == 1'b1) begin phase_1 <= phase_1_tmp; end end end assign phase_1_tmp = (count2 == 1'b0 && n88LIbUZ8njlKe0EeBu7I5E == 1'b1) ? 1'b1 : 1'b0; assign DKtuEu8YDlDAVk5CGQsPXB = phase_all & n88LIbUZ8njlKe0EeBu7I5E; assign s10zisAhwEOX8udjjtQfVH = phase_all & n88LIbUZ8njlKe0EeBu7I5E; assign FZTFt9IDRtl0lgyPesjanF = phase_0 & n88LIbUZ8njlKe0EeBu7I5E; assign yk38ClHFCgoPWXjWEFI2XB = phase_1 & n88LIbUZ8njlKe0EeBu7I5E; endmodule